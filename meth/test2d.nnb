{
    "cells": [
        {
            "language": "javascript",
            "source": [
                "import { display } from 'node-kernel';\nimport { ft, table, getPoint4 } from './utils';\nimport glMatrix from 'gl-matrix';"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "declare var display: typeof import('../../../../../../../meth/node_modules/node-kernel').display\ndeclare var glMatrix: typeof import('gl-matrix')\ndeclare var table: typeof import('../../../../../../../meth/utils').table"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const p1 = glMatrix.vec2.fromValues(2, 0)\nconst p2 = glMatrix.vec2.fromValues(1, 0)\nconst p3 = glMatrix.vec2.fromValues(0, 1)\n\nconst input = Float32Array.from([\n    p1[0], p2[0], p3[0],\n    p1[1], p2[1], p3[1],\n    1, 1, 1,\n])\n\ntable(3, input)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><tr><td>2</td>\r",
                                "<td>1</td>\r",
                                "<td>0</td></tr>\r",
                                "<tr><td>0</td>\r",
                                "<td>0</td>\r",
                                "<td>1</td></tr>\r",
                                "<tr><td>1</td>\r",
                                "<td>1</td>\r",
                                "<td>1</td></tr></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const inverted = glMatrix.mat3.create()\n\nglMatrix.mat3.invert(inverted, input)\n\ntable(3, inverted)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><tr><td>1</td>\r",
                                "<td>1</td>\r",
                                "<td>-1</td></tr>\r",
                                "<tr><td>-1</td>\r",
                                "<td>-2</td>\r",
                                "<td>2</td></tr>\r",
                                "<tr><td>0</td>\r",
                                "<td>1</td>\r",
                                "<td>0</td></tr></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const t1 = glMatrix.vec2.fromValues(-3.000000, 1.800000)\nconst t2 = glMatrix.vec2.fromValues(-2.991600, 1.800000)\nconst t3 = glMatrix.vec2.fromValues(-2.991600, 1.800000)\n\nconst target = Float32Array.from([\n    t1[0], t2[0], t3[0],\n    t1[1], t2[1], t3[1],\n    1, 1, 1,\n])\ntable(3, target)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><tr><td>-3</td>\r",
                                "<td>-2.9916000366210938</td>\r",
                                "<td>-2.9916000366210938</td></tr>\r",
                                "<tr><td>1.7999999523162842</td>\r",
                                "<td>1.7999999523162842</td>\r",
                                "<td>1.7999999523162842</td></tr>\r",
                                "<tr><td>1</td>\r",
                                "<td>1</td>\r",
                                "<td>1</td></tr></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const transformMatrix = glMatrix.mat3.create()\nglMatrix.mat3.mul(transformMatrix, inverted, target)\ntable(3, transformMatrix)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><tr><td>-0.00839996337890625</td>\r",
                                "<td>-0.00839996337890625</td>\r",
                                "<td>-2.9832000732421875</td></tr>\r",
                                "<tr><td>0</td>\r",
                                "<td>0</td>\r",
                                "<td>1.7999999523162842</td></tr>\r",
                                "<tr><td>0</td>\r",
                                "<td>0</td>\r",
                                "<td>1</td></tr></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const out = glMatrix.mat3.create()\nglMatrix.mat3.mul(out, input, transformMatrix)\ntable(3, input)\ntable(3, transformMatrix)\ntable(3, out)\n\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><tr><td>2</td>\r",
                                "<td>1</td>\r",
                                "<td>0</td></tr>\r",
                                "<tr><td>0</td>\r",
                                "<td>0</td>\r",
                                "<td>1</td></tr>\r",
                                "<tr><td>1</td>\r",
                                "<td>1</td>\r",
                                "<td>1</td></tr></table>"
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><tr><td>-0.00839996337890625</td>\r",
                                "<td>-0.00839996337890625</td>\r",
                                "<td>-2.9832000732421875</td></tr>\r",
                                "<tr><td>0</td>\r",
                                "<td>0</td>\r",
                                "<td>1.7999999523162842</td></tr>\r",
                                "<tr><td>0</td>\r",
                                "<td>0</td>\r",
                                "<td>1</td></tr></table>"
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><tr><td>-3</td>\r",
                                "<td>-2.9916000366210938</td>\r",
                                "<td>-2.9916000366210938</td></tr>\r",
                                "<tr><td>1.7999999523162842</td>\r",
                                "<td>1.7999999523162842</td>\r",
                                "<td>1.7999999523162842</td></tr>\r",
                                "<tr><td>1</td>\r",
                                "<td>1</td>\r",
                                "<td>1</td></tr></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const flippedMatrix = glMatrix.mat3.create()\nglMatrix.mat3.transpose(flippedMatrix, transformMatrix)\n\ntable(3, flippedMatrix)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><tr><td>-0.00839996337890625</td>\r",
                                "<td>0</td>\r",
                                "<td>0</td></tr>\r",
                                "<tr><td>-0.00839996337890625</td>\r",
                                "<td>0</td>\r",
                                "<td>0</td></tr>\r",
                                "<tr><td>-2.9832000732421875</td>\r",
                                "<td>1.7999999523162842</td>\r",
                                "<td>1</td></tr></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const transformOutput = glMatrix.vec3.create()\nconst transformInput = glMatrix.vec3.fromValues(...(p1 as [number, number]), 1)\n\nglMatrix.vec3.transformMat3(transformOutput, transformInput, flippedMatrix)\ntable(3, transformInput)\ndisplay.json(glMatrix.vec3.equals(glMatrix.vec3.fromValues(...t1 as [number, number, ], 1), transformOutput))\ntable(3, transformOutput)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><tr><td>2</td>\r",
                                "<td>0</td>\r",
                                "<td>1</td></tr></table>"
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/x-json",
                            "value": [
                                "true"
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><tr><td>-3</td>\r",
                                "<td>1.7999999523162842</td>\r",
                                "<td>1</td></tr></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const transformOutput2 = glMatrix.vec3.create()\nconst transformInput2 = glMatrix.vec3.fromValues(...(p2 as [number, number]), 1)\n\nglMatrix.vec3.transformMat3(transformOutput2, transformInput2, flippedMatrix)\ntable(4, transformInput2)\ndisplay.json(glMatrix.vec3.equals(glMatrix.vec3.fromValues(...t2 as [number, number, ], 1), transformOutput2))\ntable(4, transformOutput2)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><tr><td>1</td>\r",
                                "<td>0</td>\r",
                                "<td>1</td></tr></table>"
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/x-json",
                            "value": [
                                "true"
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><tr><td>-2.9916000366210938</td>\r",
                                "<td>1.7999999523162842</td>\r",
                                "<td>1</td></tr></table>"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}